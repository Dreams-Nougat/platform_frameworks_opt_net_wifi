Revision: 9e381327ade4d93b5b98e254427887f793045477
Base-for-patch-set: 4
File: service/java/com/android/server/wifi/WifiStateMachine.java

1537
Tue Jan 26 22:25:33 2016 +0000
Author: Randy Pan <1086611@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f49a3677_e63e2661
Bytes: 116
I had the same concern on this logic when reading the code this morning. The change in this block makes sense to me.

1537
Tue Jan 26 22:25:33 2016 +0000
Author: Randy Pan <1086611@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b4afde8e_5226b460
Bytes: 91
I had the same question on this piece of logic. The change of this block makes sense to me.

Base-for-patch-set: 5
File: service/java/com/android/server/wifi/WifiStateMachine.java

1541:12-1541:19
Tue Feb 16 09:25:15 2016 +0000
Author: Shuxiao Zhang <1090168@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bd6b4469_6a7397b8
Bytes: 175
If mBackgroundScanSupported == false, then enable always is true, when call setScanAlarm(false), enable will become true,
so, you can not successfully call setScanAlarm(fase).

1544:8-1544:45
Thu Jan 28 03:11:23 2016 +0000
Author: Shuxiao Zhang <1090168@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 14f8aad1_630e42c3
Bytes: 568
Hi, Xin:
mScanIntent-->ACTION_START_SCAN-->startScan.
Startscan will send message CMD_START_SCAN, which should be handled in DisConnectedState and here checkAndRestartDelayedScan is called to trigger another scan.
checkAndRestartDelayedScan --> startDelayedScan --> setScanAlarm(true);
but mAlarmEnabled is true.

Hi, Randy:
                case WifiMonitor.SCAN_RESULTS_EVENT:
                case WifiMonitor.SCAN_FAILED_EVENT:
                    /* Re-enable background scan when a pending scan result is received */

Here handle "BackgroundScanSupported == true".

1544:8-1544:45
Mon Feb 08 19:07:48 2016 +0000
Author: xin He <1056283@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 14f8aad1_630e42c3
UUID: 3d53d428_06903a37
Bytes: 426
Looks to me, the only bug is when we get WifiMonitor.SCAN_RESULTS_EVENT / WifiMonitor.SCAN_FAILED_EVENT
if it is SCAN_ALARM_SOURCE, turn mAlarmEnabled  to false. Then the checkAndRestartDelayedScan --> startDelayedScan --> setScanAlarm(true) can go through. This change is smaller and safter

We can not remove if (mBackgroundScanSupported == false) since if PNO support, we need use PNO scan when disconnected and screen off.

1544:8-1544:45
Tue Feb 16 06:18:14 2016 +0000
Author: Shuxiao Zhang <1090168@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3d53d428_06903a37
UUID: 3d775410_af7239b1
Bytes: 47
If PNO support, scan alarm will not be enabled.

1544:8-1544:45
Tue Feb 16 07:22:53 2016 +0000
Author: xin He <1056283@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3d775410_af7239b1
UUID: dd255844_73f06083
Bytes: 89
If PNO support, you should use PNO when disconnected and screen off instead of scan alarm

1544:8-1544:45
Tue Feb 16 08:36:23 2016 +0000
Author: Shuxiao Zhang <1090168@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dd255844_73f06083
UUID: 9d86802c_fe95c5f5
Bytes: 173
OK, "if PNO support, should use PNO" is correct. So,setScanAlarm is only used when mBackgroundScanSupported == false. 
And if setScanAlarm(false), then enabled is also true.

9424:24-9424:25
Tue Feb 16 06:18:14 2016 +0000
Author: Shuxiao Zhang <1090168@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7d170cd9_d82f0d86
Bytes: 109
Hi, Xin, "if it is SCAN_ALARM_SOURCE, turn mAlarmEnabled  to false."
Here is the mAlaramEnabled set to false?

