Revision: 2be691d77da84afe8165a2fec2e644ec434ec2ef
Patch-set: 4
File: service/java/com/android/server/wifi/WifiStateMachine.java

1538
Tue Jan 26 22:25:33 2016 +0000
Author: Randy Pan <1086611@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f49a3677_66fdd6d0
Bytes: 117
Shall we do "if (enabled && mBackgroundScanSupported == false)" so RTC alarm is fired only when PNO is not supported?

1538
Wed Jan 27 05:18:03 2016 +0000
Author: Shuxiao Zhang <1090168@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f49a3677_66fdd6d0
UUID: 14f8aad1_431fc64a
Bytes: 141
Hi,Randy, i think "mBackgroundScanSupported == false" should be called before setScanAlarm better. 
We have made a check at the time of call.

1541
Tue Jan 26 22:25:33 2016 +0000
Author: Randy Pan <1086611@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 14beeac6_edf0c9f5
Bytes: 136
Can you elaborate why we change from mAlarmManager.set() to mAlarmManager.setRepeating()? What's the issue with existing implementation?

1541
Wed Jan 27 05:18:03 2016 +0000
Author: Shuxiao Zhang <1090168@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 14beeac6_edf0c9f5
UUID: 34fdaec1_a409e20c
Bytes: 172
When mScanIntent trigger, you need to re-enable scanAlarm, but mAlarmEnabled is true.
if (enabled == mAlarmEnabled) return;
Therefore, scanAlarm can only be triggered once.

1541
Thu Jan 28 00:53:58 2016 +0000
Author: Randy Pan <1086611@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 34fdaec1_a409e20c
UUID: f4b5d6da_f7941766
Bytes: 348
At least when in DisconnectedState, we re-enable the alarm when receiving a scan result. I am adding Xin who knows more about the history of this code.

                case WifiMonitor.SCAN_RESULTS_EVENT:
                case WifiMonitor.SCAN_FAILED_EVENT:
                    /* Re-enable background scan when a pending scan result is received */

1541
Thu Jan 28 01:16:23 2016 +0000
Author: xin He <1056283@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 34fdaec1_a409e20c
UUID: 14beeac6_6bcadca1
Bytes: 395
It is not right.
mScanIntent-->ACTION_START_SCAN which will call startScan
Startscan will send message CMD_START_SCAN, which should be handled in L2ConnectedState and here checkAndRestartDelayedScan is called to trigger another scan.
As rangdy mentioned, both disconnected and connected state will be covered.

With your change, both scan mechanism will run. This will cause too many scans then.

