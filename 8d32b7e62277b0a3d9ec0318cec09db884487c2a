Revision: 8d32b7e62277b0a3d9ec0318cec09db884487c2a
Patch-set: 5
File: service/java/com/android/server/wifi/util/WifiAsyncChannel.java

44:20-44:25
Mon Oct 31 15:51:10 2016 +0000
Author: Etan Cohen <1039103@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2675ae07_8ea73f94
Bytes: 8
nit: get

44:20-44:25
Fri Nov 04 00:53:41 2016 +0000
Author: Sohani Rao <1118893@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2675ae07_8ea73f94
UUID: 86b57a46_c9338422
Bytes: 4
Done

108
Fri Oct 28 20:36:16 2016 +0000
Author: Mukesh Agrawal <1081399@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 663c06f3_8522a6d4
Bytes: 321
1) Still not sure that we need to trace the connection setup. Your thoughts?

2) If we do need to trace this, we should do it in a way that doesn't require copying in the code from the base class. E.g., maybe the base class could have a "logging hook" method.

  protected void logOutboundMessage(Message msg) { return; }

108
Fri Oct 28 20:48:50 2016 +0000
Author: Sohani Rao <1118893@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 663c06f3_8522a6d4
UUID: 663c06f3_6595e286
Bytes: 573
the key reason for overriding this method is the msg.obj = this statement on line 113. If this is not overridden, then the response object cannot be typecasted as WifiAsyncChannel. Those that typecast it as AsyncChannel, will still be able to use it but they won't have the logging mechanism.For reference, in WifiP2pServiceImpl, search for HALF_CONNECTED and you will see that it can be type casted into WifiAsyncChannel  because of this code. The reason we had to copy the entire code of this method is because that msg.obj had to be updated and its right in the  middle.

108
Thu Nov 03 22:47:36 2016 +0000
Author: Mukesh Agrawal <1081399@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 663c06f3_6595e286
UUID: 86b57a46_3c27efcf
Bytes: 170
Discussed out-of-band. Because method calls are dispatched dynamically, it doesn't matter where |msg.obj| is assigned from |this| in the parent class, or the child class.

108
Fri Nov 04 00:53:41 2016 +0000
Author: Sohani Rao <1118893@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 86b57a46_3c27efcf
UUID: 86b57a46_29133080
Bytes: 4
Done

133
Fri Oct 28 20:36:16 2016 +0000
Author: Mukesh Agrawal <1081399@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 663c06f3_a52d2aae
Bytes: 28
Same comment as at line 108.

133
Fri Oct 28 20:48:50 2016 +0000
Author: Sohani Rao <1118893@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 663c06f3_a52d2aae
UUID: 663c06f3_c5894e76
Bytes: 13
Same as above

133
Thu Nov 03 22:47:36 2016 +0000
Author: Mukesh Agrawal <1081399@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 663c06f3_c5894e76
UUID: 86b57a46_7c317705
Bytes: 15
As at line 108.

133
Fri Nov 04 00:53:41 2016 +0000
Author: Sohani Rao <1118893@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 86b57a46_7c317705
UUID: 86b57a46_0918ec98
Bytes: 4
Done

